name: Tests

on:
  push:
    branches: main
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read

jobs:
  unit-tests:
    strategy:
      matrix:
        key: [windows-msvc, linux-gcc, linux-clang]
        include:
          - key: windows-msvc
            os: windows-latest
            compiler: cl.exe
          - key: linux-gcc
            os: ubuntu-20.04
            compiler: g++
          - key: linux-clang
            os: ubuntu-20.04
            compiler: clang++
    runs-on: ${{ matrix.os }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: ilammy/msvc-dev-cmd@d39d8f7626e5667b00caa504eaefd7c24c9ba49d
      - name: Create cache folder
        shell: bash
        run: mkdir .cache
      - name: Enable vcpkg cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: vcpkg-${{ matrix.key }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
      - name: Install apt dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update && sudo apt-get install -y clang build-essential libssl-dev curl ninja-build
      - name: Build Tests
        env:
          CXX: ${{ matrix.compiler }}
          CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/.cache
        shell: bash
        run: |
          cmake -B build -S . -G Ninja -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
          cmake --build build/
      - name: Run Tests
        shell: bash
        run: |
          ctest --test-dir build